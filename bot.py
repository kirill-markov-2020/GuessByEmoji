import telebot
import sqlite3
import random
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

from gigachat_integration import GigaChatHelper

bot = telebot.TeleBot("7881735799:AAEfnq7_dET_fugTXRp0k9vRpOW1mpxJvBY")

try:
    GIGA_HELPER = GigaChatHelper(credentials="NWIyZDQ1MjUtNDhiYi00YmRkLWEyOWMtZTg1Yjk4MjgxYjJjOjlhNjdkZTI5LWY5MWUtNGIyZS1hMWYwLWQ5Mjk4OWY4NTE3Nw==")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
    GIGA_HELPER = None

user_emoji_history = {}
user_correct_answers = {}

def create_hint_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_hint = KeyboardButton('–ü–æ–¥—Å–∫–∞–∑–∫–∞')
    button_exit = KeyboardButton('–í—ã–π—Ç–∏')
    keyboard.add(button_hint, button_exit)
    return keyboard

def create_category_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_films = KeyboardButton('–§–∏–ª—å–º—ã')
    button_music = KeyboardButton('–ú—É–∑—ã–∫–∞')
    button_memes = KeyboardButton('–ú–µ–º—ã')
    keyboard.add(button_films, button_music, button_memes)
    return keyboard

def get_random_emoji_and_content(chat_id, category_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    used_emojis = user_emoji_history.get(chat_id, {}).get(category_id, set())
    cursor.execute('SELECT id, emoji, content, answer FROM Content WHERE category_id = ?', (category_id,))
    results = cursor.fetchall()

    available_results = [result for result in results if result[0] not in used_emojis]

    conn.close()

    if available_results:
        result = random.choice(available_results)
        return result
    else:
        return None

def get_total_emojis_in_category(category_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM Content WHERE category_id = ?', (category_id,))
    total_emojis = cursor.fetchone()[0]
    conn.close()
    return total_emojis

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=create_category_keyboard())

@bot.message_handler(func=lambda message: message.text in ['–§–∏–ª—å–º—ã', '–ú—É–∑—ã–∫–∞', '–ú–µ–º—ã'])
def handle_category(message):
    categories = {'–§–∏–ª—å–º—ã': 1, '–ú—É–∑—ã–∫–∞': 2, '–ú–µ–º—ã': 3}
    category_id = categories[message.text]

    if message.chat.id not in user_emoji_history:
        user_emoji_history[message.chat.id] = {}
    user_emoji_history[message.chat.id][category_id] = set()

    if message.chat.id not in user_correct_answers:
        user_correct_answers[message.chat.id] = {}
    user_correct_answers[message.chat.id][category_id] = 0

    emoji_data = get_random_emoji_and_content(message.chat.id, category_id)

    if emoji_data:
        emoji_id, emoji, content, answer = emoji_data
        user_emoji_history[message.chat.id][category_id].add(emoji_id)

        bot.send_message(message.chat.id, f"–£–≥–∞–¥–∞–π—Ç–µ, —á—Ç–æ —ç—Ç–æ: {emoji}", reply_markup=create_hint_keyboard())
        bot.register_next_step_handler(message, check_answer, content, answer, category_id)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")


def check_answer(message, content, correct_answer, category_id):
    if message.text == '–ü–æ–¥—Å–∫–∞–∑–∫–∞':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ —Å—Ä–∞–∑—É –¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        bot.send_message(message.chat.id, f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {correct_answer}")

        next_emoji_data = get_random_emoji_and_content(message.chat.id, category_id)

        if next_emoji_data:
            emoji_id, emoji, next_content, next_answer = next_emoji_data
            user_emoji_history[message.chat.id][category_id].add(emoji_id)
            bot.send_message(message.chat.id,
                             f"–£–≥–∞–¥–∞–π—Ç–µ, —á—Ç–æ —ç—Ç–æ: {emoji}",
                             reply_markup=create_hint_keyboard())
            bot.register_next_step_handler(message, check_answer, next_content, next_answer, category_id)
        else:
            # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            total_emojis = get_total_emojis_in_category(category_id)
            correct_guesses = user_correct_answers[message.chat.id][category_id]
            bot.send_message(message.chat.id,
                             f"–í—Å–µ —ç–º–æ–¥–∑–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å. –í—ã —É–≥–∞–¥–∞–ª–∏ {correct_guesses} –∏–∑ {total_emojis} —ç–º–æ–¥–∑–∏.",
                             reply_markup=create_category_keyboard())

    elif message.text == '–í—ã–π—Ç–∏':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        bot.send_message(message.chat.id,
                         "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                         reply_markup=create_category_keyboard())
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_answer = message.text.strip()

        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
        exact_match = user_answer.lower() == correct_answer.lower()

        # 2. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ GigaChat
        semantic_match = False
        if not exact_match and GIGA_HELPER:
            try:
                semantic_match = GIGA_HELPER.compare_answers(user_answer, correct_answer)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GigaChat: {e}")
                semantic_match = False

        if exact_match or semantic_match:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç
            if category_id == 1:  # –§–∏–ª—å–º—ã
                bot.send_video(message.chat.id, content)
            elif category_id == 2:  # –ú—É–∑—ã–∫–∞
                bot.send_audio(message.chat.id, content, title="Audio")
            elif category_id == 3:  # –ú–µ–º—ã
                bot.send_photo(message.chat.id, content)

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            user_correct_answers[message.chat.id][category_id] += 1

            # –î–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
            next_emoji_data = get_random_emoji_and_content(message.chat.id, category_id)

            if next_emoji_data:
                emoji_id, emoji, next_content, next_answer = next_emoji_data
                user_emoji_history[message.chat.id][category_id].add(emoji_id)
                bot.send_message(message.chat.id,
                                 f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {emoji}",
                                 reply_markup=create_hint_keyboard())
                bot.register_next_step_handler(message, check_answer, next_content, next_answer, category_id)
            else:
                # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                total_emojis = get_total_emojis_in_category(category_id)
                correct_guesses = user_correct_answers[message.chat.id][category_id]
                bot.send_message(message.chat.id,
                                 f"–í—Å–µ —ç–º–æ–¥–∑–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å. –í—ã —É–≥–∞–¥–∞–ª–∏ {correct_guesses} –∏–∑ {total_emojis} —ç–º–æ–¥–∑–∏.",
                                 reply_markup=create_category_keyboard())
        else:
            # –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
            bot.send_message(message.chat.id,
                             "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É.",
                             reply_markup=create_hint_keyboard())
            bot.register_next_step_handler(message, check_answer, content, correct_answer, category_id)
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
